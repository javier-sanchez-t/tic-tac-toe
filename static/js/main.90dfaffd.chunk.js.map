{"version":3,"sources":["index.js"],"names":["Square","props","squareClass","isWinnerSquare","cssClass","className","onClick","value","Board","i","positionSquare","key","this","squares","table","counter","row","j","winnerSquare","winnerSquares","toString","includes","push","renderSquare","generateSquares","React","Component","Game","state","history","Array","fill","movementIn","stepNumber","xIsNext","orderAscMoves","slice","console","log","length","calculateWinner","setState","concat","step","status","pathWinner","confettiWinner","current","winner","moves","map","move","desc","cssClassButton","jumpTo","width","window","outerWidth","height","outerHeight","statusOrder","icon","faArrowCircleDown","faArrowCircleUp","reverse","fluid","sm","handleClick","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.90dfaffd.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { faArrowCircleDown } from \"@fortawesome/free-solid-svg-icons\";\nimport { faArrowCircleUp } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport Confetti from 'react-confetti';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\n\nfunction Square(props) {\n    let squareClass = props.isWinnerSquare ? \"square square-winner\" : \"square\";\n    squareClass = squareClass + ' ' + props.cssClass;\n    return (\n        <button className={squareClass} onClick={props.onClick}>\n            {props.value}\n        </button>\n    )\n}\n\nclass Board extends React.Component {\n\n    renderSquare(i, isWinnerSquare, positionSquare) {\n        let cssClass = '';\n        if (i === 1 || i === 7) {\n            cssClass = 'row1';\n        } else if (i === 3 || i === 5) {\n            cssClass = 'row2';\n        } else if (i === 4) {\n            cssClass = 'row3';\n        }\n\n        return <Square\n            cssClass={cssClass}\n            key={\"Square\" + i}\n            value={this.props.squares[i]}\n            isWinnerSquare={isWinnerSquare}\n            onClick={() => { this.props.onClick(i, positionSquare) }}\n        />;\n    }\n\n    generateSquares() {\n        let table = [];\n        let counter = 0;\n\n        for (let i = 0; i < 3; i++) {\n            let row = [];\n\n            for (let j = 0; j < 3; j++) {\n                let positionSquare = i + \",\" + j;\n                let winnerSquare = this.props.winnerSquares && this.props.winnerSquares.toString().includes(counter) ? true : false;\n                row.push(this.renderSquare(counter, winnerSquare, positionSquare));\n                counter = counter + 1;\n            }\n\n            table.push(\n                <div key={\"row\" + i} className=\"board-row\">\n                    {row}\n                </div>);\n        }\n        return table;\n    }\n\n    render() {\n        return (\n            this.generateSquares()\n        );\n    }\n}\n\nclass Game extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            history: [{\n                squares: Array(9).fill(null),\n                movementIn: '',\n            }],\n            stepNumber: 0,\n            xIsNext: true,\n            orderAscMoves: true\n        };\n    }\n\n    handleClick(i, positionSquare) {\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\n        console.log(\"History\" + history);\n        const current = history[history.length - 1];\n        const squares = current.squares.slice();\n        if (calculateWinner(squares) || squares[i]) {\n            return;\n        }\n        squares[i] = this.state.xIsNext ? 'X' : 'O';\n        this.setState({\n            history: history.concat([{\n                squares: squares,\n                movementIn: positionSquare,\n            }]),\n            stepNumber: history.length,\n            xIsNext: !this.state.xIsNext,\n            orderAscMoves: this.state.orderAscMoves,\n        });\n    }\n\n    jumpTo(step) {\n        this.setState({\n            stepNumber: step,\n            xIsNext: (step % 2) === 0,\n        });\n    }\n\n    render() {\n        const history = this.state.history;\n        const current = history[this.state.stepNumber];\n        const winner = calculateWinner(current.squares);\n\n        let moves = history.map((step, move) => {\n            let desc = move ?\n                'Go to move #' + move :\n                'Go to start';\n            let movementIn = move ?\n                '(' + this.state.history[move].movementIn + ')' :\n                '';\n            desc = desc + ' ' + movementIn;\n            let cssClassButton = (move === this.state.stepNumber) ? \"button-selected\" : null;\n            cssClassButton = cssClassButton + ' btn btn-warning';\n\n            return (\n                <div key={move}>\n                    <button className={cssClassButton} onClick={() => { this.jumpTo(move) }}>{desc}</button>\n                </div>\n            )\n        });\n\n        let status;\n        let pathWinner;\n        let confettiWinner;\n        if (!winner && this.state.stepNumber === 9) {\n            status = 'Â¡Game over! Result: Tie';\n        } else if (winner) {\n            status = 'Winner: ' + winner.winner;\n            pathWinner = winner.pathWinner;\n            confettiWinner = <Confetti\n                width={window.outerWidth}\n                height={window.outerHeight}\n            />;\n        } else {\n            status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n            pathWinner = null;\n        }\n\n        let statusOrder = \"Sort descending\";\n        let icon = faArrowCircleDown;\n        if (!this.state.orderAscMoves) {\n            statusOrder = \"Sort ascending\";\n            icon = faArrowCircleUp;\n            moves.reverse();\n        }\n\n        return (\n            <div>\n                {confettiWinner}\n\n                <Container className=\"title\" fluid={true}>\n                    <Row>\n                        <Col sm={12}>Tic Tac Toe</Col>\n                    </Row>\n                </Container>\n\n                <Container>\n                    <Row className=\"content\">\n                        <Col sm={6} className=\"colGame\">\n                            <div className=\"game\">\n                                <div className=\"game-board\">\n                                    <Board\n                                        squares={current.squares}\n                                        winnerSquares={pathWinner}\n                                        onClick={(i, positionSquare) => { this.handleClick(i, positionSquare) }} />\n                                </div>\n                            </div>\n                            <div className=\"status\">{status}</div>\n                        </Col>\n                        <Col sm={6}>\n                            <div className=\"game-info\">\n                                {moves}\n                                <button className={\"btn btn-success\"} onClick={() => {\n                                    this.setState({\n                                        orderAscMoves: !this.state.orderAscMoves\n                                    });\n                                }}>\n                                    <FontAwesomeIcon icon={icon} />\n                                    {\" \" + statusOrder}\n                                </button>\n                            </div>\n                        </Col>\n                    </Row>\n                </Container>\n            </div>\n        );\n    }\n}\n\n\nfunction calculateWinner(squares) {\n    const lines = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6],\n    ];\n    for (let i = 0; i < lines.length; i++) {\n        const [a, b, c] = lines[i];\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n            const winner = {\n                winner: squares[a],\n                pathWinner: lines[i]\n            }\n            return winner;\n        }\n    }\n    return null;\n}\n\n// ========================================\n\nReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}