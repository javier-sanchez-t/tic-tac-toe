{"version":3,"sources":["index.js"],"names":["Square","props","squareClass","isWinnerSquare","cssClass","className","onClick","value","Board","i","positionSquare","key","this","squares","table","counter","row","j","winnerSquare","winnerSquares","toString","includes","push","renderSquare","generateSquares","React","Component","Game","state","history","Array","fill","movementIn","stepNumber","xIsNext","orderAscMoves","slice","console","log","length","calculateWinner","setState","concat","step","status","pathWinner","current","winner","moves","map","move","desc","cssClassButton","jumpTo","statusOrder","icon","faArrowCircleDown","faArrowCircleUp","reverse","fluid","sm","handleClick","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.91f5e83d.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { faArrowCircleDown } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { faArrowCircleUp } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { Container, Row, Col } from 'react-bootstrap'\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport './index.css';\r\n\r\nfunction Square(props) {\r\n    let squareClass = props.isWinnerSquare ? \"square square-winner\" : \"square\";\r\n    squareClass = squareClass + ' ' + props.cssClass;\r\n    return (\r\n        <button className={squareClass} onClick={props.onClick}>\r\n            {props.value}\r\n        </button>\r\n    )\r\n}\r\n\r\nclass Board extends React.Component {\r\n\r\n    renderSquare(i, isWinnerSquare, positionSquare) {\r\n        let cssClass = '';\r\n        if (i === 1 || i === 7) {\r\n            cssClass = 'row1';\r\n        } else if (i === 3 || i === 5) {\r\n            cssClass = 'row2';\r\n        } else if (i === 4) {\r\n            cssClass = 'row3';\r\n        }\r\n\r\n        return <Square\r\n            cssClass={cssClass}\r\n            key={\"Square\" + i}\r\n            value={this.props.squares[i]}\r\n            isWinnerSquare={isWinnerSquare}\r\n            onClick={() => { this.props.onClick(i, positionSquare) }}\r\n        />;\r\n    }\r\n\r\n    generateSquares() {\r\n        let table = [];\r\n        let counter = 0;\r\n\r\n        for (let i = 0; i < 3; i++) {\r\n            let row = [];\r\n\r\n            for (let j = 0; j < 3; j++) {\r\n                let positionSquare = i + \",\" + j;\r\n                let winnerSquare = this.props.winnerSquares && this.props.winnerSquares.toString().includes(counter) ? true : false;\r\n                row.push(this.renderSquare(counter, winnerSquare, positionSquare));\r\n                counter = counter + 1;\r\n            }\r\n\r\n            table.push(\r\n                <div key={\"row\" + i} className=\"board-row\">\r\n                    {row}\r\n                </div>);\r\n        }\r\n        return table;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            this.generateSquares()\r\n        );\r\n    }\r\n}\r\n\r\nclass Game extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            history: [{\r\n                squares: Array(9).fill(null),\r\n                movementIn: '',\r\n            }],\r\n            stepNumber: 0,\r\n            xIsNext: true,\r\n            orderAscMoves: true\r\n        };\r\n    }\r\n\r\n    handleClick(i, positionSquare) {\r\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n        console.log(\"History\" + history);\r\n        const current = history[history.length - 1];\r\n        const squares = current.squares.slice();\r\n        if (calculateWinner(squares) || squares[i]) {\r\n            return;\r\n        }\r\n        squares[i] = this.state.xIsNext ? 'X' : 'O';\r\n        this.setState({\r\n            history: history.concat([{\r\n                squares: squares,\r\n                movementIn: positionSquare,\r\n            }]),\r\n            stepNumber: history.length,\r\n            xIsNext: !this.state.xIsNext,\r\n            orderAscMoves: this.state.orderAscMoves,\r\n        });\r\n    }\r\n\r\n    jumpTo(step) {\r\n        this.setState({\r\n            stepNumber: step,\r\n            xIsNext: (step % 2) === 0,\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const history = this.state.history;\r\n        const current = history[this.state.stepNumber];\r\n        const winner = calculateWinner(current.squares);\r\n\r\n        let moves = history.map((step, move) => {\r\n            let desc = move ?\r\n                'Go to move #' + move :\r\n                'Go to start';\r\n            let movementIn = move ?\r\n                '(' + this.state.history[move].movementIn + ')' :\r\n                '';\r\n            desc = desc + ' ' + movementIn;\r\n            let cssClassButton = (move === this.state.stepNumber) ? \"button-selected\" : null;\r\n            cssClassButton = cssClassButton + ' btn btn-warning';\r\n\r\n            return (\r\n                <li key={move}>\r\n                    <button className={cssClassButton} onClick={() => { this.jumpTo(move) }}>{desc}</button>\r\n                </li>\r\n            )\r\n        });\r\n\r\n        let status;\r\n        let pathWinner;\r\n        if (!winner && this.state.stepNumber === 9) {\r\n            status = 'Â¡Game over! Result: Tie';\r\n        } else if (winner) {\r\n            status = 'Winner: ' + winner.winner;\r\n            pathWinner = winner.pathWinner;\r\n        } else {\r\n            status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\r\n            pathWinner = null;\r\n        }\r\n\r\n        let statusOrder = \"Sort descending\";\r\n        let icon = faArrowCircleDown;\r\n        if (!this.state.orderAscMoves) {\r\n            statusOrder = \"Sort ascending\";\r\n            icon = faArrowCircleUp;\r\n            moves.reverse();\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <Container className=\"title\" fluid={true}>\r\n                    <Row>\r\n                        <Col sm={12}>Tic Tac Toe</Col>\r\n                    </Row>\r\n                </Container>\r\n\r\n                <Container>\r\n                    <Row className=\"content\">\r\n                        <Col sm={6} className=\"colGame\">\r\n                            <div className=\"game\">\r\n                                <div className=\"game-board\">\r\n                                    <Board\r\n                                        squares={current.squares}\r\n                                        winnerSquares={pathWinner}\r\n                                        onClick={(i, positionSquare) => { this.handleClick(i, positionSquare) }} />\r\n                                </div>\r\n                            </div>\r\n                        </Col>\r\n                        <Col sm={6}>\r\n                            <div className=\"game-info\">\r\n                                <div>{status}</div>\r\n                                <ol>{moves}</ol>\r\n                                <button className={\"btn btn-success\"} onClick={() => {\r\n                                    this.setState({\r\n                                        orderAscMoves: !this.state.orderAscMoves\r\n                                    });\r\n                                }}>\r\n                                    <FontAwesomeIcon icon={icon} />\r\n                                    {\" \" + statusOrder}\r\n                                </button>\r\n                            </div>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nfunction calculateWinner(squares) {\r\n    const lines = [\r\n        [0, 1, 2],\r\n        [3, 4, 5],\r\n        [6, 7, 8],\r\n        [0, 3, 6],\r\n        [1, 4, 7],\r\n        [2, 5, 8],\r\n        [0, 4, 8],\r\n        [2, 4, 6],\r\n    ];\r\n    for (let i = 0; i < lines.length; i++) {\r\n        const [a, b, c] = lines[i];\r\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n            const winner = {\r\n                winner: squares[a],\r\n                pathWinner: lines[i]\r\n            }\r\n            return winner;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\n// ========================================\r\n\r\nReactDOM.render(\r\n    <Game />,\r\n    document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}